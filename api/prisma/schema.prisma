datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client_js {
  provider = "prisma-client-js"
}

enum EnableStatus {
  SHOW
  HIDE
  DELETE
}

enum UserRole {
  CASHIER
  CHEF
  NONE
}

enum TaskStatus {
  PENDING
  ONGOING
  CANCELED
  TIMEUP
  COMPLETED
}

enum QueueStatus {
  ACTIVE
  CANCELLED
  SUCCESS
}

enum HiringType {
  HOURLY
  DAILY
}

enum EmployeeStatus {
  ACTIVE
  DELETED
}

enum BankName {
  SCB
  BBL
  KTB
  BAY
  KBANK
}

model User {
  id              String            @id @default(uuid())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String?
  userName        String            @unique
  password        String
  enableStatus    EnableStatus
  LogUser         LogUser[]
  Task            Task[]
  is_admin        Boolean           @default(value: false)
  TaskLog         TaskLog[]
  Notification    Notification[]
  NotificationLog NotificationLog[]
  OTP             OTP[]
}

model LogUser {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  role      UserRole

  @@index(userId)
}

model Task {
  id         String     @id @default(uuid())
  name       String
  total      Int
  status     TaskStatus
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  finishTime DateTime
  countTime  Int
  priority   Int
  user       User       @relation(fields: [createdBy], references: [id])
  createdBy  String
  updatedBy  String
  Steamer    Steamer[]
  serverId   String?

  TaskLog TaskLog[]
  @@index(createdBy)
}

model TaskLog {
  id           String     @id @default(uuid())
  taskId       String
  task         Task       @relation(fields: [taskId], references: [id])
  status       TaskStatus
  updateStatus TaskStatus
  user         User       @relation(fields: [createdBy], references: [id])
  createdBy    String
  createdAt    DateTime   @default(now())
}

model Steamer {
  id        String   @id @default(uuid())
  steamerNo Int
  machineNo Int
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy String
  Task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?
}

model Queue {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  updateAt   DateTime    @updatedAt
  orderedAt  DateTime?
  queueNo    String
  status     QueueStatus
  ordered    Boolean
  userId     String?
  name       String?
  pictureUrl String?
  seat       Int
  table      Table?      @relation(fields: [tableId], references: [id])
  tableId    Int?
}

model Table {
  id            Int     @id @default(autoincrement())
  ochaTableName String
  tableName     String
  Queue         Queue[]
}

model Employee {
  id                String           @id @default(uuid())
  createdAt         DateTime         @default(now())
  updateAt          DateTime         @updatedAt
  name              String
  fullName          String           @default("")
  tel               String?
  lineId            String?
  bank              BankName?
  bankAccount       String?
  hiringType        HiringType
  earning           Float
  status            EmployeeStatus
  WorkingHistory    WorkingHistory[]
  Payroll           Payroll[]
  universityId      String?
  university        University?      @relation(fields: [universityId], references: [id])
  facultyId         String?
  faculty           Faculty?         @relation(fields: [facultyId], references: [id])
  profilePictureUrl String?
  idCardPictureUrl  String?
  withdrawableMoney Float?
  withdrawnMoney    Float?
}

model University {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  name      String
  Employee  Employee[]
}

model Faculty {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  name      String
  Employee  Employee[]
}

model WorkingHistory {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updateAt    DateTime   @updatedAt
  employee    Employee   @relation(fields: [employeeId], references: [id])
  employeeId  String
  historyDate DateTime
  hours       Float
  hiringType  HiringType
  earningRate Float
  earning     Float
}

model Payroll {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  employee    Employee @relation(fields: [employeeId], references: [id])
  employeeId  String
  payrollDate DateTime
  paid        Float
}

model Notification {
  id        String   @id @default(uuid())
  message   String
  hour      Int
  minute    Int
  token     String
  user      User     @relation(fields: [updatedBy], references: [id])
  updatedBy String
  updatedAt DateTime @default(now()) @updatedAt
  mon       Boolean  @default(value: false)
  tue       Boolean  @default(value: false)
  wed       Boolean  @default(value: false)
  thu       Boolean  @default(value: false)
  fri       Boolean  @default(value: false)
  sat       Boolean  @default(value: false)
  sun       Boolean  @default(value: false)
}

model NotificationLog {
  id             String   @id @default(uuid())
  notificationId String
  user           User     @relation(fields: [createdBy], references: [id])
  createdBy      String
  createdAt      DateTime @default(now())
  token          String?
  message        String?
}

model OTP {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [createdBy], references: [id])
  createdBy String
  createdAt DateTime @default(now())
  message   String?
  tel       String?
}
