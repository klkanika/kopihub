datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client_js {
  provider = "prisma-client-js"
}

enum EnableStatus {
  SHOW
  HIDE
  DELETE
}

enum UserRole {
  CASHIER
  CHEF
  NONE
}

enum TaskStatus {
  PENDING
  ONGOING
  CANCELED
  TIMEUP
  COMPLETED
}

enum QueueStatus {
  ACTIVE
  CANCELLED
  SUCCESS
}

model User {
  id           String       @id @default(uuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  name         String?
  userName     String       @unique
  password     String
  enableStatus EnableStatus
  LogUser      LogUser[]
  Task         Task[]
}

model LogUser {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  role      UserRole

  @@index(userId)
}

model Task {
  id         String     @id @default(uuid())
  name       String
  total      Int
  status     TaskStatus
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  finishTime DateTime
  countTime  Int
  priority   Int
  user       User       @relation(fields: [createdBy], references: [id])
  createdBy  String
  updatedBy  String
  Steamer    Steamer[]
  serverId   String?

  @@index(createdBy)
}

model Steamer {
  id        String   @id @default(uuid())
  steamerNo Int
  machineNo Int
  updatedAt DateTime @default(now()) @updatedAt
  updatedBy String
  Task      Task?    @relation(fields: [taskId], references: [id])
  taskId    String?
}

model Queue {
  id         Int         @id @default(autoincrement())
  createdAt  DateTime    @default(now())
  queueNo    String
  status     QueueStatus
  ordered    Boolean
  userId     String?
  name       String?
  pictureUrl String?
  seat       Int
}
